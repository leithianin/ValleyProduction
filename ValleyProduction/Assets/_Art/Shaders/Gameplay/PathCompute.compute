#pragma kernel CSMain

int _PathPointCount;
int _TextureSize;
float _MapSize;

StructuredBuffer<float> _PathPointBuffer;

RWTexture2D<float4> _PathTex;

float Line(float2 p, float2 a, float2 b)
{
	float2 pa = p - a, ba = b - a;
	float h = saturate(dot(pa, ba) / dot(ba, ba));
	float2 d = pa - ba * h;
	return dot(d, d);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int pathFragBufferSize = 4;

	float2 texelUVPos = id.xy / (float)_TextureSize;
	float2 texelWorldPos = (_MapSize * texelUVPos);

	float p = 0;
	float thickness = 1.0f;
	//float thicknessCoef = 1.0f;

	for (int i = 0; i < _PathPointCount; i++)
	{
		p = Line(texelWorldPos, float2((_PathPointBuffer[pathFragBufferSize * i + 0]), (_PathPointBuffer[pathFragBufferSize * i + 1])), float2((_PathPointBuffer[pathFragBufferSize * i + 2]), (_PathPointBuffer[pathFragBufferSize * i + 3])));

		float gradient = smoothstep(p, 0, thickness);

		if (p < 10)
		{
			//thicknessCoef -= p * 10.0f;
			gradient -= lerp(0, 10, p * 10.0f);
		}
	}
	_PathTex[id.xy] = lerp(float4(1, 1, 1, 1), float4(0, 0, 0, 1), smoothstep(0.0f, thickness, gradient));
	//_PathTex[id.xy] += float4(1.f, 1.f, 1.f, 1.f);
}
