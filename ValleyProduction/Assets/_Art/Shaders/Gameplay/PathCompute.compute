#pragma kernel CSMain

int _PathPointCount;
int _TextureSize;
float _MapSize;

float _PathThickness;

Texture2D _NoiseTex;
SamplerState sampler_NoiseTex;
float _NoiseDetail;
float _NoisePower;

StructuredBuffer<float> _PathPointBuffer;

RWTexture2D<float4> _PathTex;

float Line(float2 p, float2 a, float2 b)
{
	float2 pa = p - a, ba = b - a;
	float h = saturate(dot(pa, ba) / dot(ba, ba));
	float2 d = pa - ba * h;
	return dot(d, d);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int pathFragBufferSize = 4;

	float2 texelUVPos = id.xy / (float)_TextureSize;
	float2 texelWorldPos = (_MapSize * texelUVPos);

	float p = 0;
	//float thickness = 5.f;
	float thicknessCoef = _PathThickness;

	float minDist = _PathThickness * 10.f;

	for (int i = 0; i < _PathPointCount; i++)
	{
		float2 startWorldPos = float2(_PathPointBuffer[pathFragBufferSize * i + 0], _PathPointBuffer[pathFragBufferSize * i + 1]);
		float2 endWorldPos = float2(_PathPointBuffer[pathFragBufferSize * i + 2], _PathPointBuffer[pathFragBufferSize * i + 3]);

		p = Line(texelWorldPos, startWorldPos, endWorldPos);

		//float gradient = smoothstep(p, 0, _PathThickness);

		if (p <= minDist)
		{
			thicknessCoef = p / _PathThickness;
			minDist = p;

			thicknessCoef *= _NoiseTex.SampleLevel(sampler_NoiseTex, texelUVPos * _NoiseDetail, 0).r * _NoisePower;
		}
	}

	_PathTex[id.xy] = lerp(float4(1, 1, 1, 1), float4(0, 0, 0, 1), smoothstep(0.0f, _PathThickness, thicknessCoef));
	//_PathTex[id.xy] += float4(1.f, 1.f, 1.f, 1.f);
}
